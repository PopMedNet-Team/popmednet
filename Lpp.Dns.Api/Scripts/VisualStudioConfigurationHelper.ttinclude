<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="EnvDTE" #>

<#+

/// <summary>
/// This class allows access to configuration files inside Visual Studio Projects.
/// </summary>
public class ConfigurationHelper
{
	/// <summary>
	/// Parses appSettings and connectionStrings of the first *.config file that can be found in the given 
	/// Visual Studio Project.
	/// </summary>
	public static ConfigurationHelper GetDefaultConfiguration(EnvDTE.Project project)
    {
		IEnumerable<EnvDTE.ProjectItem> allProjectItems = GetProjectItemsRecursively(project.ProjectItems);
		var firstConfigurationItem = allProjectItems.FirstOrDefault(pi => pi.FileCount > 0 && pi.FileNames[0].EndsWith(".config"));

		if (firstConfigurationItem == null)
			throw new Exception("There is no configuration file in the given project");
		else 
			return GetConfiguration(firstConfigurationItem.FileNames[0]);
    }
	/// <summary>
	/// Parses appSettings and connectionStrings of a given configuration file
	/// <summary>
	public static ConfigurationHelper GetConfiguration(string fileName)
    {
		if (string.IsNullOrEmpty(fileName)
		 || !System.IO.File.Exists(fileName))
			throw new ArgumentException("Configuration File '{0}' does not exist.");

		// open the file as xml document
		XDocument configDoc = null;
		try
        {
			configDoc = XDocument.Load(fileName);
        }
		catch(Exception ex)
        {
			throw new Exception("Error parsing configuration file.", ex);
        }

		// create return object
		var ret = new ConfigurationHelper();

		// iterate and parse all appSettings inside this file
		var appSettings = configDoc.Descendants("appSettings").SingleOrDefault();
		if (appSettings != null)
			foreach(var setting in appSettings.Descendants("add"))
				ret.AppSettings.Add(setting.Attribute("key").Value, setting.Attribute("value").Value);

		// iterate and parse all connectionStrings inside this file
		var connectionStrings = configDoc.Descendants("connectionStrings");
		if (connectionStrings != null)
			foreach(var connString in connectionStrings.Descendants("add"))
				ret.ConnectionStrings.Add(connString.Attribute("name").Value, connString.Attribute("connectionString").Value);

		return ret;
    }

	/// <summary>
	/// Creates a new Instance of this class.
	/// <summary>
	private ConfigurationHelper()
    {
		this.AppSettings = new Dictionary<string, string>();
		this.ConnectionStrings = new Dictionary<string, string>();
    }
	/// <summary>
	/// Contains all appSettings of the configuration file.
	/// </summary>
	public Dictionary<string, string> AppSettings { get; private set; }
	/// <summary>
	/// Contains all connectionStrings of the configuration file.
	/// </summary>
	public Dictionary<string, string> ConnectionStrings { get; private set; }

	/// <summary>
	/// Returns the Filename and path to this configuration
	/// </summary>
	public string SettingsFile { get; private set; }

	/// <summary>
	/// Recursively iterates all project items and returns a complete list
	/// </summary>
	private static List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
    {
		var ret = new List<EnvDTE.ProjectItem>();

		foreach(EnvDTE.ProjectItem item in items)
        {
			ret.Add(item);
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
        }

		return ret;
    }
}

#>
