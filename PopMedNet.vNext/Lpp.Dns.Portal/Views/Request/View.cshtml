@model Lpp.Dns.Portal.Models.RequestViewModel
@{
    Layout = "~/Views/_Layout.cshtml";

    var routings = Model.Routings.List.Entities.Select(r =>
        new
        {
            ID = r.ID,
            RequestDataMartID = r.RequestDataMartID,
            DataMartName = r.RequestDataMart.DataMart.Name,
            Status = r.RequestDataMart.Status,
            RequestID = r.RequestDataMart.RequestID,
            DueDate = r.RequestDataMart.DueDate,
            Priority = r.RequestDataMart.Priority,
            Message = r.RequestDataMart.Responses.Where(rr => rr.Count == r.RequestDataMart.Responses.Max(x => x.Count)).Select(i => i.ResponseMessage).FirstOrDefault()
        }).OrderBy(r => r.DataMartName);
    var responses = Model.Responses.List.Entities.Select(r => new
    {
        ID = r.ID,
        RequestDataMartID = r.SingleResponse != null ? r.SingleResponse.RequestDataMartID : r.Group.Responses.FirstOrDefault().RequestDataMartID,
        RequestID = Model.RequestID,
        Messages = r.Messages,
        DataMartName = r.Name,
        ResponseTime = r.ResponseTime,
        r.IsRejectedBeforeUpload,
        r.IsRejectedAfterUpload,
        r.IsResultsModified,
        r.NeedsApproval,
        r.CanView,
        r.CanApprove,
        r.CanGroup
    });

    var model = new
    {
        ProjectID = Model.Request.ProjectID,
        Routings = routings,
        UnAssignedDataMarts = Model.UnassignedDataMarts.Entities,
        Responses = responses,
        AggregationModes = Model.Responses.AggregationModes
    };

}
@using Lpp.Composition
@using Lpp.Mvc
@using Lpp.Mvc.Controls
@using Lpp.Dns.Portal.Controllers
@using Lpp.Dns.Portal.Models

@section Head{
    <link href="~/Content/forms.min.css" rel="stylesheet" />
    <script src="~/Scripts/Common.js"></script>
    <script src="~/js/Request/View.js"></script>
    <script>
        Requests.View.ResponseHistoryUrlTemplate = '@Html.Raw(Url.Action( (ResponseController c) => c.History( Guid.NewGuid(), Guid.NewGuid() ) ) ).ToString().Split('?')[0]';
        Requests.View.RawModel = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(model) + ';')
        Requests.View.RequestID = @Html.Raw("'" + Model.RequestID + "';")
        Requests.View.AllowEditRequestID = @Html.Raw(("'" + Model.AllowEditRequestID + "'"));
        Requests.View.init();
    </script>

    <style>
        .RequestView-Body {
            margin-top: 18px;
        }

        #action-buttons {
            margin-bottom: 18px;
        }

            #action-buttons > button,
            section > nav > button,
            section > nav > input[type=submit] {
                width: 130px;
                margin: 2px 3px;
            }

        .RequestType {
            margin-bottom: 15px;
        }

            .RequestType .Name {
                font-size: 1.3em;
                display: block;
            }

            .RequestType .Description {
                display: block;
            }

        a.routing-history,
        a.response-history {
            cursor: pointer;
        }

        nav.response-actions,
        nav.routing-actions {
            margin: 0px 8px 8px 8px;
        }
    </style>
}

<article class="panel panel-default visible">
    <div class="panel-heading">
        <ol class="breadcrumb">
            <li><a href="/">Home</a></li>
            <li><a href="/requests">Requests</a></li>
            <li class="active">@Model.Request.Name</li>
        </ol>
    </div>
    <div class="panel-body">
        @Html.ValidationSummary("", new { @class = "alert alert-sm alert-danger validation-summary" })
        @using (Html.BeginForm<RequestController>(c => c.View(new RequestResultsPostModel { RequestID = Model.RequestID, Folder = Model.OriginalFolder }), attributes: new { @class = "form", role = "form", id = "frmDetails" }))
        {
            @(Html.Partial("~/Views/Request/RequestHeader.cshtml", new RequestHeaderViewModel
        {
            Request = Model.Request,
            Type = Model.RequestType,
            RequesterCenterName = Model.RequesterCenterName,
            WorkplanTypeName = Model.WorkplanTypeName,
            ReportAggregationLevelName = Model.ReportAggregationLevelName
        }))
            <div id="action-buttons" style="text-align:right;">
                @if (Model.AllowApprove)
                {
                    <button type="submit" name="Approve" id="btnApprove" value="Approve" class="btn btn-success">Approve</button>
                    <button type="submit" name="Reject" id="btnReject" value="Reject" onclick="return promptMessage();" class="btn btn-danger">Reject</button>
                    <input type="hidden" name="RejectMessage" id="RejectMessage" />
                    <script type="text/javascript">
                        function promptMessage() {
                            var field = $("input[name=RejectMessage]");
                            var n = prompt("Please enter rejection message", field.val());

                            if (n == null)
                                return false;

                            field.val(n);
                            return true;
                        }
                    </script>
                }
                @if (Model.AllowCopy)
                {
                    <button type="submit" name="Copy" id="btnCopy" value="Copy" class="btn btn-primary" onclick="LoadSpinner()">Copy</button>
                }
                @if (Model.AllowMetadataEdit){
                <button type="button" class=" btn btn-default pull-left" name="EditRequestMetadata" onclick="Requests.View.onEditRequestMetadata()">Edit Metadata</button>
                }
            </div>

            if (Model.IsScheduled)
            {
                <text><div class="alert alert-warning"><strong>Run Mode:</strong> "Request is scheduled.")</div></text>
            }
            else
            {
                <text><div class="alert alert-info"><strong>Run Mode:</strong> Request was submitted immediately.</div></text>
            }

            <div class="RequestView-Body">
                @Model.BodyView(Html)
            </div>
        }
    </div>
</article>

<div id="routings">
    @using (Html.BeginForm<RequestController>(c => c.View(new RequestResultsPostModel { RequestID = Model.RequestID, Folder = Model.OriginalFolder }), attributes: new { @class = "form", role = "form", id = "frmRoutings" }))
    {
        if (Model.Responses.List.Entities.Any())
        {
            <article class="panel panel-default visible">
                <div class="panel-heading">Received Responses</div>
                <div class="panel-body">
                    <input type="hidden" name="AggregationMode" id="AggregationMode" data-bind="value: AggregationMode" />
                    <input type="hidden" name="SelectedResponses" id="SelectedResponses" data-bind="value: SelectedResponses" />
                    <div id="gResponses" data-bind="kendoGrid: {
                                data: Responses,
                                rowTemplate: 'response-row-template',
                                altRowTemplate: 'response-altrow-template',
                                useKOTemplates: true,
                                columns:[
                                {title: '', width:35 },
                                {field: 'Name' , title: 'DataMart' },
                                {field: 'ResponseTime' , title: 'Last Response' , format: 'MM/dd/yyyy hh:mm:ss tt' },
                                {field: 'StatusFormatted' , title: 'Status' },
                                {field: 'Message' , title: 'Message' },
                                {title: '', width:80 }
                                ]
                                }">
                    </div>
                </div>
                @if (Model.Responses.ShowCheckboxes && (Model.Responses.AllowViewResults || Model.Responses.AllowGroup || Model.Responses.AllowUngroup || Model.Responses.AllowApproval || Model.Responses.AllowResubmit))
                {
                    <nav class="response-actions">
                        @if (Model.Responses.AllowViewResults && Model.Responses.List.Entities.Any(x => x.CanView))
                        {
                            if (Model.Responses.AllowViewIndividualResults && Model.Responses.AggregationModes != null && Model.Responses.AggregationModes.Any())
                            {
                                <div class="btn-group">
                                    <button id="btnDisplayResults" class="btn btn-default dropdown-toggle" data-toggle="dropdown" type="button" data-bind="enable:SelectedResponses().length > 0">View Results <span class="caret"></span></button>
                                    <ul class="dropdown-menu" role="menu" data-bind="foreach: AggregationModes">
                                        <li><a data-bind="text: Name, click:$root.onSelectAggregationMode"></a></li>
                                    </ul>
                                </div>
                            }
                            else
                            {
                                <button id="btnDisplayResults" class="btn btn-default" type="submit" data-bind="click: onView, enable:SelectedResponses().length > 0">View Results</button>
                            }
                        }
                        @if (Model.Responses.AllowApproval)
                        {
                            <button id="btnApproveResponses" name="ApproveResponses" value="Approve" class="btn btn-default" type="submit" data-bind="enable:SelectedResponses().length > 0">Approve</button>
                            <button id="btnRejectResponses" name="RejectResponses" class="btn btn-default" type="submit" data-bind="click: onReject, enable:SelectedResponses().length > 0">Reject</button>
                        }
                        @if (Model.Responses.AllowResubmit)
                        {
                            <button id="btnResubmitResponses" name="ResubmitResponses" value="resubmit" class="btn btn-default" type="submit" data-bind="click: onResubmit, enable:SelectedResponses().length> 0">Resubmit</button>
                        }
                        @if (Model.Responses.AllowGroup)
                        {
                            <button id="btnGroupResponses" name="btnGroupResponses" class="btn btn-default" type="submit" data-bind="click: onGroup, enable:SelectedResponses().length > 1">Group</button>
                            <input type="hidden" name="GroupResponses" id="hGroupResponses" />
                        }
                        @if (Model.Responses.AllowUngroup)
                        {
                            <button id="btnUngroupResponses" name="btnUngroupResponses" class="btn btn-default" type="submit" data-bind="click: onUnGroup, enable:SelectedResponses().length > 0">Ungroup</button>
                            <input type="hidden" name="UngroupResponses" id="hUngroupResponses" />
                        }
                    </nav>
                    if (Model.Responses.AllowViewResults)
                    {
                        <input type="hidden" name="DisplayResults" data-bind="value: DisplayResultsClicked" />
                    }
                    if (Model.Responses.AllowApproval || Model.Responses.AllowResubmit)
                    {
                        <input type="hidden" name="RejectMessage" data-bind="value: RejectMessage" />
                    }
                    if (Model.Responses.AllowGroup || Model.Responses.AllowUngroup)
                    {
                        <input type="hidden" name="GroupName" data-bind="value: GroupName" />
                    }
                }
            </article>
        }
        if (Model.Routings.List.Entities.Any() || Model.Routings.List.TotalPages > 0 || Model.UnassignedDataMarts.Entities.Any())
        {
            <article class="panel panel-default visible">
                <div class="panel-heading">Incomplete Routings</div>
                <div class="panel-body">
                    <input type="hidden" name="SelectedDataMarts" id="SelectedDataMarts" data-bind="value: SelectedRoutings" />
                    @*Knockout binding configuration is done in ts to support adding bound element to the grid header.*@
                    <div id="gIncompleteRoutings" data-bind="kendoGrid: IncompleteRoutingGridConfig"></div>
                    <p style="text-align:center;background:#fff;line-height:2em;" data-bind="visible: Routings().length == 0">No Routings</p>
                </div>

                <nav class="routing-actions">
                    @if (Model.Routings.AllowChangeRoutings)
                    {
                        <button type="button" id="btnAddDataMart" class="btn btn-default" data-bind="click: onAddDataMart ">Add DataMarts</button>
                        <button type="submit" name="RemoveDataMarts" id="RemoveDataMarts" class="btn btn-default" @( Model.Routings.List.Entities.Any(r => r.RequestDataMart.Status != Lpp.Dns.DTO.Enums.RoutingStatus.Canceled) ? "" : "disabled") value="Remove DataMarts">Remove DataMarts</button>
                    }

                    <button style="display: none;" type="button" id="btnEditRoutingStatus" class="btn btn-default" data-bind="visible: CanOverrideRoutingStatus, enable:SelectedRoutings().length > 0, click: onEditRoutingStatus">Edit Routing Status</button>
                    @if (Model.AllowMetadataEdit)
                    {
                        <button class="btn btn-default pull-right" type="button" id="btnBulkEdit" data-bind="click: onBulkEdit, enable: SelectedRoutings().length > 0">Bulk Edit</button>
                    }
                </nav>

                <input type="hidden" name="AddDataMarts" id="AddDataMarts" data-bind="value: DataMartsToAdd" />
            </article>

        }
    }

    <div class="modal fade" id="responseHistoryDialog" role="dialog" aria-labelledby="responseHistoryDialogTitle" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="responseHistoryDialogTitle">History</h4>
                </div>
                <div class="modal-body" data-bind="foreach:$root.RoutingHistory">
                    <table class="table table-hover">
                        <caption data-bind="text:DataMart"></caption>
                        <tbody data-bind="foreach:Items">
                            <tr>
                                <td data-bind="text:$root.ConvertDateToLocal(DateTime) " style="width:110px;"></td>
                                <td>
                                    <span data-bind="text:Action"></span> by <span data-bind="text:UserName"></span>
                                    <div data-bind="visible:$.trim(Message || '') != '', text:', ' + (Message || '')"></div>
                                </td>
                                <td data-bind="style:{width: !IsCurrent && IsResponseItem ? '122px' : ''}">
                                    <a data-bind="visible:!IsCurrent && IsResponseItem, href:Requests.View.ResponseHistoryUrlTemplate + '?requestID=' + RequestID + '&responseID=' + ResponseID">[view response]</a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script id="routings-row-template" type="text/html">
    <tr role="row">
        <td>
            @if (Model.Routings.AllowChangeRoutings)
            {
                <input type="checkbox" data-bind="value: RequestDataMartID, checked: $root.SelectedRoutings" />
            }
        </td>
        <td data-bind="text: DataMartName"></td>
        <td data-bind="text: Requests.View.translateRoutingStatus(Status)"></td>
        <td data-bind="text: Requests.View.TranslatePriority(Priority)"></td>
        <td data-bind="text: DueDate != null ? moment(DueDate).format('MM/D/YYYY') : null"></td>
        <td data-bind="text: Message"></td>
        <td>
            @if (Model.Routings.ShowHistory)
            {
                <a class="routing-history" data-bind="click: $root.onShowRoutingHistory">[History]</a>
            }
        </td>
    </tr>
</script>
<script id="routings-altrow-template" type="text/html">
    <tr role="row" class="k-alt">
        <td>
            @if (Model.Routings.AllowChangeRoutings)
            {
                <input type="checkbox" data-bind="value: RequestDataMartID, checked: $root.SelectedRoutings" />
            }
        </td>
        <td data-bind="text: DataMartName"></td>
        <td data-bind="text: Requests.View.translateRoutingStatus(Status)"></td>
        <td data-bind="text: Requests.View.TranslatePriority(Priority)"></td>
        <td data-bind="text: DueDate != null ? moment(DueDate).format('MM/D/YYYY') : null"></td>
        <td data-bind="text: Message"></td>
        <td>
            @if (Model.Routings.ShowHistory)
            {
                <a class="routing-history" data-bind="click: $root.onShowRoutingHistory">[History]</a>
            }
        </td>
    </tr>
</script>
<script id="response-row-template" type="text/html">
    <tr role="row">
        <td>
            <input type="checkbox" data-bind="value: ID, checked: $root.SelectedResponses" />
        </td>
        <td data-bind="text: DataMartName"></td>
        <td data-bind="text: ResponseTimeFormatted"></td>
        <td data-bind="text: StatusFormatted"></td>
        <td data-bind="foreach:Messages">
            <p data-bind="text:$data"></p>
        </td>
        <td>
            @if (Model.Responses.ShowHistory)
            {
                <a class="response-history" data-bind="click: $root.onShowResponseHistory">[History]</a>
            }
        </td>
    </tr>
</script>
<script id="response-altrow-template" type="text/html">
    <tr role="row" class="k-alt">
        <td>
            <input type="checkbox" data-bind="value: ID, checked: $root.SelectedResponses" />
        </td>
        <td data-bind="text: DataMartName"></td>
        <td data-bind="text: ResponseTimeFormatted"></td>
        <td data-bind="text: StatusFormatted"></td>
        <td data-bind="foreach:Messages">
            <p data-bind="text:$data"></p>
        </td>
        <td>
            @if (Model.Responses.ShowHistory)
            {
                <a class="response-history" data-bind="click: $root.onShowResponseHistory">[History]</a>
            }
        </td>
    </tr>
</script>
