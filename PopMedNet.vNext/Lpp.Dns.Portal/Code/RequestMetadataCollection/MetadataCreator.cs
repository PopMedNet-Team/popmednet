using System.ComponentModel.Composition;
using System.Reactive.Linq;
using Lpp.Composition;
using Lpp.Dns.Model;
using Lpp.FileSystem;
using Lpp.Data;
using log4net;
using System.Collections.Generic;
using System;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;
using System.IO;

namespace Lpp.Dns.Portal.Code.RequestMetadataCollection
{

    public class MetadataCreator
    {
        [Import] public IPluginService Plugins { get; set; }

        private IQueryable<Request> _requestList; // find local variable naming convention
        private const string XmlFilename = "RequestMetadataCollection.xml";

        public void Create(IQueryable<Request> requestList)
        {
            _requestList = requestList;
            // What kind of call to Contract is needed here?
            // Contract.Ensures(Contract.Result<string>() != null);

            XmlWriterSettings xmlWriterSettings = new XmlWriterSettings()
            {
                Indent = true,
                IndentChars = "\t",
                NewLineOnAttributes = true
            };

            using (var xmlWriter = XmlWriter.Create(XmlFilename, xmlWriterSettings))
            {
                // TODO: Null value for an element. May create an empty string
                
                #region XSD Enumeration Types
                ///////////////////// Enumeration Types /////////////////////
                // HAND REFERENCE these enum types by editing the XSD!!           

                //<xs:simpleType name="phiDisclosureLevel_type">
                //  <xs:restriction base="xs:string">
                //    <xs:enumeration value="Aggregated" />
                //    <xs:enumeration value="Limited" />
                //    <xs:enumeration value="De-identified" />
                //    <xs:enumeration value="PHI" />
                //  </xs:restriction>
                //</xs:simpleType>

                //<xs:simpleType name="purposeOfUse_type">
                //  <xs:restriction base="xs:string">
                //    <xs:enumeration value="TREAT" />
                //    <xs:enumeration value="HPAYMT" />
                //    <xs:enumeration value="HOPERAT" />
                //    <xs:enumeration value="HRESCH" />
                //    <xs:enumeration value="HMARKT" />
                //    <xs:enumeration value="PATRQT" />
                //    <xs:enumeration value="PUBHLTH" />                
                //  </xs:restriction>
                //</xs:simpleType>       

                //<xs:simpleType name="routingStatus_type">
                //  <xs:restriction base="xs:string">
                //    <xs:enumeration value="Draft" />      
                //    <xs:enumeration value="Submitted" />   
                //    <xs:enumeration value="Completed" />   
                //    <xs:enumeration value="AwaitingRequestApproval" />   
                //    <xs:enumeration value="RequestRejected" />   
                //    <xs:enumeration value="Canceled" />   
                //    <xs:enumeration value="Resubmitted" />   
                //    <xs:enumeration value="PendingUpload" />   
                //    <xs:enumeration value="AwaitingResponseApproval" />   
                //    <xs:enumeration value="Hold" />   
                //    <xs:enumeration value="ResponseRejectedBeforeUpload" />   
                //    <xs:enumeration value="ResponseRejectedAfterUpload" />   
                //    <xs:enumeration value="Failed" />   
                //  </xs:restriction>
                //</xs:simpleType>

                //<xs:simpleType name="priority_type">
                //  <xs:restriction base="xs:string">
                //    <xs:enumeration value="Low" />      
                //    <xs:enumeration value="Normal" /> 
                //    <xs:enumeration value="High" /> 
                //  </xs:restriction>
                //</xs:simpleType>
                // <!-- Needs to be datatype with enumeration of values; optional with only one allowed -->
                // Nullable? Optional?
                #endregion

                #region XSD Complex Types
                ///////////////////// Complex Types (generated by the C# code) /////////////////////
                //<xs:element name="requestType">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="id" type="xs:string"/>
                //            <xs:element name="name" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="idc9Diagnosis">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="code" type="xs:string"/>
                //            <xs:element name="description" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="dataMart">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="id" type="xs:string"/>
                //            <xs:element name="name" type="xs:string"/>
                //            <xs:element name="organization" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="project">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="name" type="xs:string"/>
                //            <xs:element name="description" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="group">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="name" type="xs:string"/>
                //            <xs:element name="description" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="activity">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="id" type="xs:string"/>
                //            <xs:element name="description" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>
                #endregion

                try
                {

                    var rts = Plugins.GetPluginRequestTypes();

                    var defaultNullElementStr = "xsi:nil=\"true\"";     // replace with String.Empty since REMOVE is there to generate the correct XSD, when test values are null
                    xmlWriter.WriteStartDocument();

                    foreach (Request request in _requestList)
                    {
                       
                        xmlWriter.WriteStartElement("request");
                        xmlWriter.WriteStartElement("header");
                        xmlWriter.WriteStartElement("requestType");
                        xmlWriter.WriteElementString("name", Plugins.GetPluginRequestType(request.RequestTypeId).RequestType.Name);
                        xmlWriter.WriteElementString("id", request.RequestTypeId.ToString());
                        xmlWriter.WriteEndElement(); // end requestType element 
                        xmlWriter.WriteElementString("name", request.Name);
                        xmlWriter.WriteElementString("description", request.Description);
                        xmlWriter.WriteElementString("priority", "Normal");
                        InsertDateValue(xmlWriter, "dueDate", request.DueDate, string.Empty);
                        InsertDateValue(xmlWriter, "submittedDate", request.Submitted, string.Empty);
                        xmlWriter.WriteElementString("submitter", request.CreatedByUser != null ? request.CreatedByUser.Username : defaultNullElementStr);
                        xmlWriter.WriteElementString("submitterOrganization", request.CreatedByUser != null && request.CreatedByUser.Organization != null ? request.CreatedByUser.Organization.Name : defaultNullElementStr);
                        xmlWriter.WriteStartElement("activity");
                        xmlWriter.WriteElementString("id", request.Activity != null ? request.Activity.Id.ToString() : defaultNullElementStr);
                        xmlWriter.WriteElementString("description", request.Activity != null ? request.Activity.Description : defaultNullElementStr);
                        xmlWriter.WriteEndElement(); // end activity element     
                        xmlWriter.WriteElementString("purposeOfUse", request.PurposeOfUse);
                        xmlWriter.WriteStartElement("group");
                        xmlWriter.WriteElementString("name", request.Project != null && request.Project.Group != null ? request.Project.Group.Name : defaultNullElementStr);
                        xmlWriter.WriteElementString("description", defaultNullElementStr); // TODO: find group description
                        xmlWriter.WriteEndElement(); // end group element    
                        xmlWriter.WriteStartElement("project");
                        xmlWriter.WriteElementString("name", request.Project != null ? request.Project.Name : defaultNullElementStr);
                        xmlWriter.WriteElementString("description", request.Project != null ? request.Project.Description : defaultNullElementStr);
                        xmlWriter.WriteEndElement(); // end project element 
                        xmlWriter.WriteElementString("phiDisclosureLevel", "Aggregated");   // TODO: Find real value          

                        xmlWriter.WriteEndElement(); // end header element                    

                        xmlWriter.WriteStartElement("body");
                        xmlWriter.WriteStartElement("criteria");
                        xmlWriter.WriteStartElement("codes");

                        xmlWriter.WriteStartElement("idc9Diagnosis");
                        xmlWriter.WriteElementString("code", "250.01");
                        xmlWriter.WriteElementString("description", "description");
                        xmlWriter.WriteEndElement(); // end idc9Diagnosis element
                        xmlWriter.WriteStartElement("observationRange");
                        xmlWriter.WriteElementString("startDate", "2011-03-30T09:30:10Z");
                        xmlWriter.WriteElementString("endDate", "2012-03-30T09:30:10Z");
                        xmlWriter.WriteEndElement(); // end observationRange element
                        xmlWriter.WriteEndElement(); // end criteria element

                        xmlWriter.WriteStartElement("report");
                        xmlWriter.WriteElementString("ageRange", "01-05,06-18,19-30,31-65,66+");
                        xmlWriter.WriteElementString("race", "white,black, ...");
                        xmlWriter.WriteEndElement(); // end report element

                        xmlWriter.WriteEndElement(); // end body element
                        xmlWriter.Flush();

                        xmlWriter.WriteStartElement("routings");
                        foreach (RequestRouting requestRouting in request.Routings)
                        {
                            var requestRoutingInstance = requestRouting.Instances.OrderByDescending(rri => rri.ResponseTime.Value).First(); // TODO: NULL ResponseTime?? Empty list?? Is an empty list an exception?
                            xmlWriter.WriteStartElement("routing");
                            xmlWriter.WriteStartElement("dataMart");
                            xmlWriter.WriteElementString("datamartId", requestRoutingInstance.DataMartId.ToString());
                            xmlWriter.WriteElementString("datamartName", requestRouting.DataMart != null ? requestRouting.DataMart.Name : defaultNullElementStr);
                            xmlWriter.WriteElementString("datamartOrganization", requestRouting.DataMart != null /*&& requestRouting.DataMart.Organization != null*/ ? requestRouting.DataMart.Organization.Name : defaultNullElementStr);
                            xmlWriter.WriteEndElement(); // end dataMart element
                            if (requestRoutingInstance.RespondedBy != null)
                            {
                                xmlWriter.WriteElementString("responder", requestRoutingInstance.RespondedBy.Username);
                                xmlWriter.WriteElementString("responderOrganization", requestRoutingInstance.RespondedBy.Organization != null ? requestRoutingInstance.RespondedBy.Organization.Name : defaultNullElementStr);
                            }
                            else
                            {
                                // TODO: REMOVE this code once XSD is completed
                                xmlWriter.WriteElementString("responder", defaultNullElementStr);
                                xmlWriter.WriteElementString("responderOrganization", defaultNullElementStr);
                            }
                            InsertDateValue(xmlWriter, "respondDate", requestRoutingInstance.ResponseTime, string.Empty);
                            xmlWriter.WriteElementString("routingStatus", requestRouting.RequestStatus.ToString()); // TODO: Replace with string value instead of the ID
                            xmlWriter.WriteEndElement(); // end routing element
                            xmlWriter.Flush();
                        }
                        xmlWriter.WriteEndElement(); // end request element
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                    xmlWriter.Flush();
                    xmlWriter.WriteEndDocument();                    
                }
            }
        }

        private void InsertDateValue(XmlWriter xmlWriter, string elementName, DateTime? dateTime, string nullDateTimeMessage)
        {
            if (dateTime.HasValue)
                xmlWriter.WriteElementString(elementName, dateTime.Value.ToUniversalTime().ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'"));
            else
                xmlWriter.WriteElementString(elementName, nullDateTimeMessage);
        }
    }
}