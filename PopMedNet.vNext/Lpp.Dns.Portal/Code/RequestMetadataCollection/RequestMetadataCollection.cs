using System.ComponentModel.Composition;
using System.Reactive.Linq;
using Lpp.Composition;
//using Lpp.Dns.Model;
//using Lpp.Data;
using log4net;
using System.Collections;
using System.Collections.Generic;
using System;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.Schema;
using System.IO;
using System.Reflection;
using Renci.SshNet;
using Lpp.Dns.Data;
using System.Data.Entity;
using Lpp.Dns.General.Metadata.Models;

namespace Lpp.Dns.Portal.Code.RequestMetadataCollection
{
    [Export(typeof(IRequestMetadataCollectionProvider)), PartMetadata(ExportScope.Key, TransactionScope.Id)]
    class RequestMetadataCollection : IRequestMetadataCollectionProvider
    {
        [Import]
        public ILog Log { get; set; }
        [Import]
        public IPluginService Plugins { get; set; }

        private string XmlFilename = Path.Combine(new Uri(Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase)).LocalPath, "RequestMetadataCollection_" + DateTime.Today.ToString("yyyy-MM-dd") + ".xml");
        private string XsdFilename = Path.Combine(new Uri(Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase)).LocalPath, "RequestMetadataCollection.xsd");

        public void Export()
        {
            XmlWriterSettings xmlWriterSettings = new XmlWriterSettings()
            {
                Indent = true,
                IndentChars = "\t",
                NewLineOnAttributes = true
            };

            using (var xmlWriter = XmlWriter.Create(XmlFilename, xmlWriterSettings))
            {
                #region XSD Enumeration Types
                ///////////////////// Enumeration Types /////////////////////
                // HAND REFERENCE these enum types by editing the XSD!!           

                //<xs:simpleType name="phiDisclosureLevel_type">
                //  <xs:restriction base="xs:string">
                //    <xs:enumeration value="Aggregated" />
                //    <xs:enumeration value="Limited" />
                //    <xs:enumeration value="De-identified" />
                //    <xs:enumeration value="PHI" />
                //  </xs:restriction>
                //</xs:simpleType>

                //<xs:simpleType name="purposeOfUse_type">
                //  <xs:restriction base="xs:string">
                //    <xs:enumeration value="TREAT" />
                //    <xs:enumeration value="HPAYMT" />
                //    <xs:enumeration value="HOPERAT" />
                //    <xs:enumeration value="HRESCH" />
                //    <xs:enumeration value="HMARKT" />
                //    <xs:enumeration value="PATRQT" />
                //    <xs:enumeration value="PUBHLTH" />                
                //  </xs:restriction>
                //</xs:simpleType>       

                //<xs:simpleType name="routingStatus_type">
                //  <xs:restriction base="xs:string">
                //    <xs:enumeration value="Draft" />      
                //    <xs:enumeration value="Submitted" />   
                //    <xs:enumeration value="Completed" />   
                //    <xs:enumeration value="AwaitingRequestApproval" />   
                //    <xs:enumeration value="RequestRejected" />   
                //    <xs:enumeration value="Canceled" />   
                //    <xs:enumeration value="Resubmitted" />   
                //    <xs:enumeration value="PendingUpload" />   
                //    <xs:enumeration value="AwaitingResponseApproval" />   
                //    <xs:enumeration value="Hold" />   
                //    <xs:enumeration value="ResponseRejectedBeforeUpload" />   
                //    <xs:enumeration value="ResponseRejectedAfterUpload" />   
                //    <xs:enumeration value="Failed" />   
                //  </xs:restriction>
                //</xs:simpleType>

                //<xs:simpleType name="priority_type">
                //  <xs:restriction base="xs:string">
                //    <xs:enumeration value="Low" />      
                //    <xs:enumeration value="Normal" /> 
                //    <xs:enumeration value="High" /> 
                //  </xs:restriction>
                //</xs:simpleType>
                // <!-- Needs to be datatype with enumeration of values; optional with only one allowed -->
                // Nullable? Optional?
                #endregion

                #region XSD Complex Types
                ///////////////////// Complex Types (generated by the C# code) /////////////////////
                //<xs:element name="requestType">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="id" type="xs:string"/>
                //            <xs:element name="name" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="idc9Diagnosis">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="code" type="xs:string"/>
                //            <xs:element name="description" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="dataMart">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="id" type="xs:string"/>
                //            <xs:element name="name" type="xs:string"/>
                //            <xs:element name="organization" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="project">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="name" type="xs:string"/>
                //            <xs:element name="description" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="group">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="name" type="xs:string"/>
                //            <xs:element name="description" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>

                //<xs:element name="activity">
                //    <xs:complexType>
                //        <xs:sequence>
                //            <xs:element name="id" type="xs:string"/>
                //            <xs:element name="description" type="xs:string"/>
                //        </xs:sequence>
                //    </xs:complexType>
                //</xs:element>
                #endregion

                DataContext db = new DataContext();
                try
                {
                    List<ExportedRequestSearchResult> requests = (from r in db.Requests.AsNoTracking()
                                                                  where r.SubmittedOn.HasValue
                                                                  orderby r.SubmittedOn
                                                                  select new ExportedRequestSearchResult
                                                                  {
                                                                      RequestID = r.ID,
                                                                      Identifier = r.Identifier.ToString(),
                                                                      RequestType = r.RequestType.Name,
                                                                      RequestTypeID = r.RequestTypeID,
                                                                      RequestName = r.Name,
                                                                      Priority = r.Priority,
                                                                      DueDate = r.DueDate,
                                                                      SubmittedOn = r.SubmittedOn,
                                                                      CreatedOn = r.CreatedOn,
                                                                      CreatedBy = ((r.CreatedBy.FirstName + " " + r.CreatedBy.MiddleName).Trim() + " " + r.CreatedBy.LastName).Trim(),
                                                                      CreatedByUserName = r.CreatedBy.UserName,
                                                                      CreatedByEmail = r.CreatedBy.Email,
                                                                      CreatedByOrganization = r.CreatedBy.Organization.Name,
                                                                      UpdatedOn = r.UpdatedOn,
                                                                      UpdatedBy = ((r.UpdatedBy.FirstName + " " + r.UpdatedBy.MiddleName).Trim() + " " + r.UpdatedBy.LastName).Trim(),
                                                                      UpdatedByUserName = r.UpdatedBy.UserName,
                                                                      UpdatedByOrganization = r.UpdatedBy.Organization.Name,
                                                                      UpdatedByEmail = r.UpdatedBy.Email,
                                                                      Project = r.Project.Name,
                                                                      ProjectDescription = r.Project.Description,
                                                                      Group = r.Project.Group.Name,
                                                                      Organization = r.Organization.Name,
                                                                      TaskOrder = r.Activity.ParentActivity.ParentActivity.Name,
                                                                      TaskOrderID = r.Activity.ParentActivity.ParentActivityID,
                                                                      Activity = r.Activity.ParentActivity.Name,
                                                                      ActivityID = r.Activity.ParentActivityID,
                                                                      ActivityProject = r.Activity.Name,
                                                                      ActivityProjectID = r.ActivityID,
                                                                      Description = r.Description,
                                                                      PurposeOfUse = r.PurposeOfUse,
                                                                      LevelOfPHIDisclosure = r.PhiDisclosureLevel,
                                                                      RequesterCenter = r.RequesterCenter.Name,
                                                                      WorkplanType = r.WorkplanType.Name
                                                                  }).ToList();

                    List<ExportedRequestSearchRoutingResult> routingResults = (from dm in db.RequestDataMarts.AsNoTracking()
                                                                               join rsp in db.Responses.AsNoTracking() on dm.ID equals rsp.RequestDataMartID
                                                                               let currentIndex = dm.Responses.Select(x => x.Count).Max()
                                                                               where dm.Request.SubmittedOn.HasValue
                                                                               select new ExportedRequestSearchRoutingResult
                                                                               {
                                                                                   RequestID = dm.RequestID,
                                                                                   DataMartID = dm.DataMartID,
                                                                                   DataMart = dm.DataMart.Name,
                                                                                   OrganizationID = dm.DataMart.OrganizationID,
                                                                                   Organization = dm.DataMart.Organization.Name,
                                                                                   Status = dm.Status,

                                                                                   ResponseID = rsp.ID,
                                                                                   ResponseIndex = rsp.Count,
                                                                                   IsCurrentResponse = rsp.Count == currentIndex,
                                                                                   RespondedBy = ((rsp.RespondedBy.FirstName + " " + rsp.RespondedBy.MiddleName).Trim() + " " + rsp.RespondedBy.LastName).Trim(),
                                                                                   RespondedByUserName = rsp.RespondedBy.UserName,
                                                                                   ResponderOrganization = rsp.RespondedBy.Organization.Name,
                                                                                   ResponderEmail = rsp.RespondedBy.Email,
                                                                                   RespondedOn = rsp.ResponseTime,
                                                                                   ResponseMessage = rsp.ResponseMessage,
                                                                                   SubmittedOn = rsp.SubmittedOn,
                                                                                   SubmittedBy = ((rsp.SubmittedBy.FirstName + " " + rsp.SubmittedBy.MiddleName).Trim() + " " + rsp.SubmittedBy.LastName).Trim(),
                                                                                   SubmittedByUserName = rsp.SubmittedBy.UserName,
                                                                                   SubmitterEmail = rsp.SubmittedBy.Email,
                                                                                   SubmitterOrganization = rsp.SubmittedBy.Organization.Name
                                                                               }).ToList();

                    Lpp.Dns.General.Metadata.RequestMetadataCollection.RequestMetadata.Export(xmlWriter, requests, routingResults, Plugins);
                    string xsdDocument = string.Empty;
                    using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("Lpp.Dns.Portal.Code.RequestMetadataCollection.RequestMetadataCollection.xsd"))
                    using (StreamReader reader = new StreamReader(stream))
                    {
                        xsdDocument = reader.ReadToEnd();
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                    xmlWriter.Close();
                    db.Dispose();
                }
                if (System.IO.File.Exists(XmlFilename))
                {
                    Validate(XmlFilename, XsdFilename);
                    UploadFile(XmlFilename);
                    //System.IO.File.Delete(XmlFilename);
                }
            }
        }

        public class SFTPNotConnectedException : Exception
        {
            public SFTPNotConnectedException(String Message)
                : base(Message)
            {
            }
        }
        private void UploadFile(String filePath)
        {
            // Copyright (c) 2010, RENCI
            // All rights reserved.
            // Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
            // * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
            // * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
            // * Neither the name of RENCI nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
            // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            SftpClient client = null;
            Stream stream = null;
            try
            {
                stream = new FileStream(filePath, FileMode.Open);
                client = new SftpClient(new PasswordConnectionInfo(System.Configuration.ConfigurationManager.AppSettings["SFTPServer"], Int32.Parse(System.Configuration.ConfigurationManager.AppSettings["SFTPPort"]), System.Configuration.ConfigurationManager.AppSettings["SFTPUserName"], System.Configuration.ConfigurationManager.AppSettings["SFTPPassword"]));
                client.Connect();
                if (!client.IsConnected)
                    throw new SFTPNotConnectedException("Cannot connect to SFTP metadata request server");
                client.ChangeDirectory(System.Configuration.ConfigurationManager.AppSettings["SFTPFolder"]);
                client.UploadFile(stream, Path.GetFileName(filePath), true);
            }
            catch (Exception e)
            {
                throw e;
            }
            finally
            {
                if (client != null && client.IsConnected)
                    client.Disconnect();
                if (stream != null)
                    stream.Close();
            }

        }

        private void Validate(string source, string xsdFilePath)
        {
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.Schemas.Add("urn://popmednet/requests/metadata", xsdFilePath);
            settings.ValidationType = ValidationType.Schema;
            settings.ValidationEventHandler += settings_ValidationEventHandler;
            //settings.ValidationFlags |= XmlSchemaValidationFlags.ProcessInlineSchema;
            settings.ValidationFlags |= XmlSchemaValidationFlags.ReportValidationWarnings;
            var reader = XmlReader.Create(source, settings);
            while (reader.Read()) { }
            reader.Close();
        }

        void settings_ValidationEventHandler(object sender, System.Xml.Schema.ValidationEventArgs e)
        {
            Log.Error(e.Message);
        }

    }
}