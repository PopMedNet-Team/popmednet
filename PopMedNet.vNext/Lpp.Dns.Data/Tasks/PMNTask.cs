using Lpp.Dns.DTO;
using Lpp.Dns.DTO.Enums;
using Lpp.Dns.DTO.Events;
using Lpp.Dns.DTO.Security;
using Lpp.Utilities;
using Lpp.Utilities.Logging;
using Lpp.Utilities.Objects;
using Lpp.Utilities.Security;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lpp.Dns.Data
{
    [Table("Tasks")]
    public class PmnTask : EntityWithID
    {
        public PmnTask()
        {
            CreatedOn = DateTime.UtcNow;
            Priority = Priorities.Medium;
            Status = TaskStatuses.NotStarted;
            DirectToRequest = false;
            this.Users = new HashSet<PmnTaskUser>();
            this.References = new HashSet<TaskReference>();
            this.TaskChangedLogs = new HashSet<Audit.PmnTaskChangeLog>();
        }

        [Required, MaxLength(255)]
        public string Subject { get; set; }
        [MaxLength(255)]
        public string Location { get; set; }
        public string Body { get; set; }

        public DateTime? DueDate { get; set; }
        public DateTime CreatedOn { get; set; }
        public DateTime? StartOn { get; set; }
        public DateTime? EndOn { get; set; }
        public DateTime? EstimatedCompletedOn { get; set; }
        public Priorities Priority { get; set; }
        public TaskStatuses Status { get; set; }
        public TaskTypes Type { get; set; }
        public double PercentComplete { get; set; }
        public bool DirectToRequest { get; set; }

        public Guid? WorkflowActivityID { get; set; }
        public virtual WorkflowActivity WorkflowActivity { get; set; }

        public virtual ICollection<PmnTaskUser> Users { get; set; }
        public virtual ICollection<TaskReference> References {get; set;}
        public virtual ICollection<Audit.PmnTaskChangeLog> TaskChangedLogs { get; set; }

        /// <summary>
        /// Adds a log item to TaskChangedLogs indicating the task was modified.
        /// </summary>
        /// <param name="identity">The identity to associate with the log item.</param>
        /// <param name="db">The datacontext.</param>
        /// <param name="optionalDescription">An optional description to use instead of the description generated by the ActionLogConfiguration.</param>
        /// <returns></returns>
        public async Task LogAsModifiedAsync(ApiIdentity identity, DataContext db, string optionalDescription = null)
        {
            var logger = new ActionLogConfiguration();
            var logItem = await logger.CreateLogItemAsync(this, EntityState.Modified, identity, db);
            if (!string.IsNullOrWhiteSpace(optionalDescription))
            {
                logItem.Description = optionalDescription;
            }

            this.TaskChangedLogs.Add(logItem);
        }

        /// <summary>
        /// Confirms if there is an active task open for the specified request/workflow activity.
        /// </summary>
        /// <param name="requestID">The ID of the request.</param>
        /// <param name="workflowActivityID">The ID of the workflow activity.</param>
        /// <param name="db">The datacontext.</param>
        /// <returns>True if there is an task that has not been canceled or completed for the request/workflow activity, else false.</returns>
        public static bool HasActiveTaskForRequestActivity(Guid requestID, Guid workflowActivityID, DataContext db)
        {
            return db.ActionReferences.Where(tr => tr.ItemID == requestID 
                                                && tr.Type == DTO.Enums.TaskItemTypes.Request 
                                                && tr.Task.WorkflowActivityID == workflowActivityID 
                                                && tr.Task.Type == DTO.Enums.TaskTypes.Task 
                                                && tr.Task.Status != TaskStatuses.Cancelled
                                                && tr.Task.Status != TaskStatuses.Complete
                                                && tr.Task.EndOn == null
                                                ).Any();
        }

        /// <summary>
        /// Confirms if there is an active task open for the specified request/workflow activity.
        /// </summary>
        /// <param name="requestID">The ID of the request.</param>
        /// <param name="workflowActivityID">The ID of the workflow activity.</param>
        /// <param name="db">The datacontext.</param>
        /// <returns>True if there is an task that has not been canceled or completed for the request/workflow activity, else false.</returns>
        public static async Task<bool> HasActiveTaskForRequestActivityAsync(Guid requestID, Guid workflowActivityID, DataContext db)
        {
            return await db.ActionReferences.Where(tr => tr.ItemID == requestID
                                                && tr.Type == DTO.Enums.TaskItemTypes.Request
                                                && tr.Task.WorkflowActivityID == workflowActivityID
                                                && tr.Task.Type == DTO.Enums.TaskTypes.Task
                                                && tr.Task.Status != TaskStatuses.Cancelled
                                                && tr.Task.Status != TaskStatuses.Complete
                                                && tr.Task.EndOn == null
                                                ).AnyAsync();
        }

        /// <summary>
        /// Gets the first active task for the specified request/workflow activity.
        /// </summary>
        /// <param name="requestID">The ID of the request.</param>
        /// <param name="workflowActivityID">The ID of the workflow activity.</param>
        /// <param name="db">The datacontext.</param>
        /// <returns>The first task found that is not canceled or completed for the specified request/workflow activity, else null if none found.</returns>
        public static PmnTask GetActiveTaskForRequestActivity(Guid requestID, Guid workflowActivityID, DataContext db)
        {
            var task = db.ActionReferences.Where(tr => tr.ItemID == requestID 
                                                    && tr.Type == DTO.Enums.TaskItemTypes.Request 
                                                    && tr.Task.WorkflowActivityID == workflowActivityID 
                                                    && tr.Task.Type == DTO.Enums.TaskTypes.Task
                                                    && tr.Task.Status != TaskStatuses.Cancelled
                                                    && tr.Task.Status != TaskStatuses.Complete
                                                    && tr.Task.EndOn == null
                                                    )
                                                    .Select(tr => tr.Task).FirstOrDefault();
            return task;
        }

        /// <summary>
        /// Gets the ID of the first active task for the specified request/workflow activity.
        /// </summary>
        /// <param name="requestID">The ID of the request.</param>
        /// <param name="workflowActivityID">The ID of the workflow activity.</param>
        /// <param name="db">The datacontext.</param>
        /// <returns></returns>
        public static Guid? GetActiveTaskIDForRequestActivity(Guid requestID, Guid? workflowActivityID, DataContext db)
        {
            if (!workflowActivityID.HasValue)
            {
                return null;
            }

            var taskID = db.ActionReferences.Where(tr => tr.ItemID == requestID
                                                    && tr.Type == DTO.Enums.TaskItemTypes.Request
                                                    && tr.Task.WorkflowActivityID == workflowActivityID
                                                    && tr.Task.Type == DTO.Enums.TaskTypes.Task
                                                    && tr.Task.Status != TaskStatuses.Cancelled
                                                    && tr.Task.Status != TaskStatuses.Complete
                                                    && tr.Task.EndOn == null
                                                    )
                                                    .Select(tr => tr.TaskID).FirstOrDefault();

            if (taskID == Guid.Empty)
                return null;

            return taskID;
        }

        /// <summary>
        /// Gets the first active task for the specified request/workflow activity.
        /// </summary>
        /// <param name="requestID">The ID of the request.</param>
        /// <param name="workflowActivityID">The ID of the workflow activity.</param>
        /// <param name="db">The datacontext.</param>
        /// <returns>The first task found that is not canceled or completed for the specified request/workflow activity, else null if none found.</returns>
        public static async Task<PmnTask> GetActiveTaskForRequestActivityAsync(Guid requestID, Guid workflowActivityID, DataContext db)
        {
            var task = await db.ActionReferences.Where(tr => tr.ItemID == requestID
                                                    && tr.Type == DTO.Enums.TaskItemTypes.Request
                                                    && tr.Task.WorkflowActivityID == workflowActivityID
                                                    && tr.Task.Type == DTO.Enums.TaskTypes.Task
                                                    && tr.Task.Status != TaskStatuses.Cancelled
                                                    && tr.Task.Status != TaskStatuses.Complete 
                                                    && tr.Task.EndOn == null
                                                    )
                                                    .Select(tr => tr.Task).FirstOrDefaultAsync();
            return task;
        }

        /// <summary>
        /// Creates a new task for the specified request/workflow activity/workflow. The Request.Users that have view permissions for the task will automatically be added to the Task.Users.
        /// </summary>
        /// <remarks>Note: the new task is not added to the datacontext.</remarks>
        /// <param name="requestID">The ID of the request.</param>
        /// <param name="workflowActivityID">The ID of the workflow activity.</param>
        /// <param name="workflowID">The ID of the workflow.</param>
        /// <param name="db">The datacontext.</param>
        /// <returns></returns>
        public static PmnTask CreateForWorkflowActivity(Guid requestID, Guid workflowActivityID, Guid workflowID, DataContext db)
        {
            return CreateForWorkflowActivity(requestID, workflowActivityID, workflowID, db, string.Empty);
        }

        /// <summary>
        /// Creates a new task for the specified request/workflow activity/workflow. The Request.Users that have view permissions for the task will automatically be added to the Task.Users.
        /// </summary>
        /// <remarks>Note: the new task is not added to the datacontext.</remarks>
        /// <param name="requestID">The ID of the request.</param>
        /// <param name="workflowActivityID">The ID of the workflow activity.</param>
        /// <param name="workflowID">The ID of the workflow.</param>
        /// <param name="db">The datacontext.</param>
        /// <param name="subject">The subject for the new task.</param>
        /// <returns></returns>
        public static PmnTask CreateForWorkflowActivity(Guid requestID, Guid workflowActivityID, Guid workflowID, DataContext db, string subject)
        {
            var task = new Lpp.Dns.Data.PmnTask();
            task.Type = DTO.Enums.TaskTypes.Task;
            task.StartOn = task.CreatedOn;
            task.DirectToRequest = true;
            task.Status = DTO.Enums.TaskStatuses.InProgress;
            task.Subject = string.IsNullOrEmpty(subject) ? db.WorkflowActivities.Where(a => a.ID == workflowActivityID).Select(a => a.Name).FirstOrDefault() : subject;
            task.WorkflowActivityID = workflowActivityID;

            task.References.Add(new TaskReference { TaskID = task.ID, ItemID = requestID, Type = DTO.Enums.TaskItemTypes.Request });

            //get the users based on the request.users that have permission to view the task for the workflow activity
            var query = from ru in db.RequestUsers
                        let pq = db.ProjectRequestTypeWorkflowActivities.Where(a => a.SecurityGroup.Users.Any(u => u.UserID == ru.UserID) &&
                                                                                    a.PermissionID == PermissionIdentifiers.ProjectRequestTypeWorkflowActivities.ViewTask &&
                                                                                    a.ProjectID == ru.Request.ProjectID &&
                                                                                    a.RequestTypeID == ru.Request.RequestTypeID &&
                                                                                    a.WorkflowActivityID == workflowActivityID)
                        where ru.RequestID == requestID &&
                        pq.Any(a => a.PermissionID == PermissionIdentifiers.ProjectRequestTypeWorkflowActivities.ViewTask) &&
                        pq.All(a => a.Allowed)
                        select ru;


            foreach (var userID in query.Select(r => r.UserID).Distinct())
            {
                //NOTE: by default the users will be added to task as worker.
                task.Users.Add(new PmnTaskUser { Role = DTO.Enums.TaskRoles.Worker, UserID = userID });
            }

            return task;
        }

        public static async Task ConfirmUsersToTaskForWorkflowRequest(PmnTask task, Request request, DataContext db)
        {
            //Get all the users that have view task permission but have not been added to the specified task.
            var query = from ru in db.RequestUsers
                        let pq = db.ProjectRequestTypeWorkflowActivities.Where(a => a.SecurityGroup.Users.Any(u => u.UserID == ru.UserID) &&
                                                                                    a.PermissionID == PermissionIdentifiers.ProjectRequestTypeWorkflowActivities.ViewTask &&
                                                                                    a.ProjectID == ru.Request.ProjectID &&
                                                                                    a.RequestTypeID == ru.Request.RequestTypeID &&
                                                                                    a.WorkflowActivityID == ru.Request.WorkFlowActivityID)
                        where ru.RequestID == request.ID &&
                        pq.Any(a => a.PermissionID == PermissionIdentifiers.ProjectRequestTypeWorkflowActivities.ViewTask) &&
                        pq.All(a => a.Allowed)
                        && !db.ActionUsers.Any(tu => tu.TaskID == task.ID && tu.UserID == ru.UserID)
                        select ru;

            IEnumerable<Guid> usersToAdd = query.Select(r => r.UserID).Distinct();
            foreach (var userID in usersToAdd)
            {
                //NOTE: by default the users will be added to task as worker.
                task.Users.Add(new PmnTaskUser { Role = DTO.Enums.TaskRoles.Worker, UserID = userID });
            }

            if (usersToAdd.Any())
                await db.SaveChangesAsync();
        }

        
    }

    internal class ActionConfiguration : EntityTypeConfiguration<PmnTask>
    {
        public ActionConfiguration() {
            this.HasMany(t => t.Users).WithRequired(t => t.Task).HasForeignKey(t => t.TaskID).WillCascadeOnDelete(true);
            this.HasMany(t => t.References).WithRequired(t => t.Task).HasForeignKey(t => t.TaskID).WillCascadeOnDelete(true);
            HasMany(t => t.TaskChangedLogs).WithRequired(t => t.Task).HasForeignKey(t => t.TaskID).WillCascadeOnDelete(true);
        }
    }

    internal class ActionSecurityConfiguration : DnsEntitySecurityConfiguration<Data.PmnTask>
    {
        public override IQueryable<PmnTask> SecureList(DataContext db, IQueryable<PmnTask> query, ApiIdentity identity, params PermissionDefinition[] permissions)
        {
            if (permissions == null || permissions.Length == 0)
                permissions = new PermissionDefinition[] {
                    PermissionIdentifiers.Portal.ListTasks
                };

            return db.Filter(query, identity, permissions);
        }

        public override Task<bool> CanInsert(DataContext db, ApiIdentity identity, params PmnTask[] objs)
        {
            return HasPermissions(db, identity, PermissionIdentifiers.Portal.ListTasks); //Once this becomes free form, there will need to be new permissions for this.
        }

        public override Task<bool> CanDelete(DataContext db, ApiIdentity identity, params Guid[] keys)
        {
            return HasPermissions(db, identity, keys, PermissionIdentifiers.Portal.ListTasks);
        }

        public override Task<bool> CanUpdate(DataContext db, ApiIdentity identity, params Guid[] keys)
        {
            return HasPermissions(db, identity, keys, PermissionIdentifiers.Portal.ListTasks);
        }
    }

    internal class ActionDtoMappingConfiguration : EntityMappingConfiguration<PmnTask, TaskDTO>
    {
        public override System.Linq.Expressions.Expression<Func<PmnTask, TaskDTO>> MapExpression
        {
            get
            {
                return (a) => new TaskDTO
                {
                    Body = a.Body,
                    CreatedOn = a.CreatedOn,
                    DueDate = a.DueDate,
                    EndOn = a.EndOn,
                    EstimatedCompletedOn = a.EstimatedCompletedOn,
                    Location = a.Location,
                    PercentComplete = a.PercentComplete,
                    Priority = a.Priority,
                    StartOn = a.StartOn,
                    Status = a.Status,
                    Subject = a.Subject,
                    Type = a.Type,
                    ID = a.ID,
                    Timestamp = a.Timestamp,
                    WorkflowActivityID = a.WorkflowActivityID,
                    DirectToRequest = a.DirectToRequest
                };
            }
        } 
    }

    public class ActionLogConfiguration : EntityLoggingConfiguration<DataContext, PmnTask>
    {

        public override IEnumerable<AuditLog> ProcessEvents(System.Data.Entity.Infrastructure.DbEntityEntry obj, DataContext db, ApiIdentity identity, bool read)
        {
            var task = obj.Entity as PmnTask;
            if (task == null)
                throw new InvalidCastException("Invalid entity to log, expecting PmnTask.");

            var logs = new List<AuditLog>();

            var logItem = CreateLogItem(task, obj.State, identity, db);

            var exists = !db.LogsTaskChange.Where((x) => x.TimeStamp == logItem.TimeStamp && x.TaskID == logItem.TaskID && x.UserID == logItem.UserID).IsEmpty();
            if (exists)
                logItem.TimeStamp = DateTimeOffset.UtcNow.AddMilliseconds(1);

            db.LogsTaskChange.Add(logItem);
            logs.Add(logItem);

            return logs;
        }

        /// <summary>
        /// Creates a new PmnTaskChangeLog item.
        /// </summary>
        /// <param name="task">The task to create the log item for.</param>
        /// <param name="objState">The current state of the object.</param>
        /// <param name="identity">The current identity.</param>
        /// <param name="db">The datacontext.</param>
        /// <returns></returns>
        public Audit.PmnTaskChangeLog CreateLogItem(PmnTask task, System.Data.Entity.EntityState objState, ApiIdentity identity, DataContext db)
        {
            return Utilities.AsyncHelpers.RunSync(() => CreateLogItemAsync(task, objState, identity, db));
        }

        /// <summary>
        /// Creates a new PmnTaskChangeLog item.
        /// </summary>
        /// <param name="task">The task to create the log item for.</param>
        /// <param name="objState">The current state of the object.</param>
        /// <param name="identity">The current identity.</param>
        /// <param name="db">The datacontext.</param>
        /// <returns></returns>
        public async Task<Audit.PmnTaskChangeLog> CreateLogItemAsync(PmnTask task, System.Data.Entity.EntityState objState, ApiIdentity identity, DataContext db)
        {
            Audit.PmnTaskChangeLog logItem = null;
            if (identity != null)
            {
                var orgUser = await db.Users.Where(u => u.ID == identity.ID).Select(u => new { u.UserName, u.Organization.Acronym }).FirstOrDefaultAsync();

                logItem = new Audit.PmnTaskChangeLog
                {
                    Description = string.Format("Task has been {0} by {1}.", objState, (orgUser.Acronym + @"\" + orgUser.UserName)),
                    Reason = objState,
                    UserID = identity == null ? Guid.Empty : identity.ID,
                    TaskID = task.ID,
                    Task = task
                };

            }
            else
            {
                logItem = new Audit.PmnTaskChangeLog
                {
                    Description = string.Format("Task has been {0} because {1}.", objState, (task.Subject)),
                    Reason = objState,
                    UserID = Guid.Empty,
                    TaskID = task.ID,
                    Task = task
                };
            }

            return logItem;
        }

        public override IEnumerable<Notification> CreateNotifications<T>(T logItem, DataContext db, bool immediate)
        {
            if (typeof(T) == typeof(Audit.PmnTaskReminderLog))
            {
                var reminderLog = logItem as Audit.PmnTaskReminderLog;
                db.Entry(reminderLog.Task).Collection(l => l.References).Load();

                var requestReference = reminderLog.Task.References.FirstOrDefault(tr => tr.Type == TaskItemTypes.Request);

                var recipients = (from s in db.UserEventSubscriptions
                                  where s.EventID == EventIdentifiers.Task.WorkflowTaskReminder.ID && !s.User.Deleted && s.User.Active &&
                                  db.ActionUsers.Any(tu => tu.TaskID == reminderLog.TaskID && tu.UserID == s.UserID) &&
                                  (
                                      (db.ProjectEvents.Any(a => a.EventID == EventIdentifiers.Task.WorkflowTaskReminder.ID && a.Project.Requests.Any(r => r.ID == requestReference.ItemID)
                                                             && a.SecurityGroup.Users.Any(u => u.UserID == s.UserID && !u.User.Deleted && u.User.Active))
                                    || db.OrganizationEvents.Any(a => a.EventID == EventIdentifiers.Task.WorkflowTaskReminder.ID && a.Organization.Requests.Any(r => r.ID == requestReference.ItemID)
                                                             && a.SecurityGroup.Users.Any(u => u.UserID == s.UserID && !u.User.Deleted && u.User.Active))
                                      )
                                     &&
                                     (
                                         db.ProjectEvents.Where(a => a.EventID == EventIdentifiers.Task.WorkflowTaskReminder.ID && a.Project.Requests.Any(r => r.ID == requestReference.ItemID)
                                             && a.SecurityGroup.Users.Any(u => u.UserID == s.UserID && !u.User.Deleted && u.User.Active)).All(a => a.Allowed)
                                     && db.OrganizationEvents.Where(a => a.EventID == EventIdentifiers.Task.WorkflowTaskReminder.ID && a.Organization.Requests.Any(r => r.ID == requestReference.ItemID)
                                             && a.SecurityGroup.Users.Any(u => u.UserID == s.UserID && !u.User.Deleted && u.User.Active)).All(a => a.Allowed)
                                      )
                                   )
                                  && ((!immediate && s.NextDueTime <= DateTime.UtcNow) || s.Frequency == Frequencies.Immediately)
                                  from r in db.FilteredRequestListForEvent(s.UserID, null)
                                  where r.ID == requestReference.ItemID
                                  select new {s, r}).Where(sub => sub.r != null).Select(sub =>
                                  new Recipient
                                  {
                                      Email = sub.s.User.Email,
                                      Phone = sub.s.User.Phone,
                                      Name = sub.s.User.FirstName + " " + sub.s.User.LastName,
                                      UserID = sub.s.UserID
                                  }).ToArray();

                if (recipients == null || recipients.Length == 0)
                    return null;

                var detail = (from r in db.Requests
                              where r.ID == requestReference.ItemID
                              select new { RequestIdentifier = r.Identifier, RequestName = r.Name, ProjectName = r.Project.Name }).FirstOrDefault();

                var description = GenerateTimestampText(reminderLog) + "<p>Here are your most recent <b>Task Reminder</b> notifications from <b>" + detail.ProjectName + "</b>.</p>" +
                  "<p>The following task assigned to you is active:</p>" +
                  "<p>Task '" + reminderLog.Task.Subject + "' for request '" + detail.RequestName + "' with ID '" + detail.RequestIdentifier + "' is '" + ObjectEx.ToString(reminderLog.Task.Status, true) + "'.</p>";

                var notification = new Notification
                {
                    Subject = "Task Reminder Notification",
                    Body = description,
                    Recipients = recipients
                };
                IList<Notification> notifies = new List<Notification>();
                notifies.Add(notification);

                return notifies.AsEnumerable();
            }

            return Enumerable.Empty<Notification>();
        }

        public async override Task<IEnumerable<Notification>> GenerateNotificationsFromLogs(DataContext db)
        {
            var notifications = new List<Notification>();

            var requestStatusToIgnore = new []{ RequestStatuses.Cancelled, RequestStatuses.Complete, RequestStatuses.TerminatedPriorToDistribution, RequestStatuses.CompleteWithReport };
            var completedTaskStatus = new []{ TaskStatuses.Cancelled, TaskStatuses.Complete, TaskStatuses.Deferred };

            var tasks = await (from t in db.Actions.Include(x => x.References)
                               let request = (from r in db.Requests join tr in db.ActionReferences on r.ID equals tr.ItemID where tr.TaskID == t.ID && tr.Type == TaskItemTypes.Request && r.CancelledOn == null && !requestStatusToIgnore.Contains(r.Status) select r).FirstOrDefault()
                               where !completedTaskStatus.Contains(t.Status) && !t.EndOn.HasValue && t.WorkflowActivityID.HasValue && request != null &&
                               t.Users.Any()
                               select new { 
                                   TaskID = t.ID,
                                   Task = t, 
                                   ProjectName = request.Project.Name,
                                   RequestName = request.Name,
                                   RequestIdentifier = request.Identifier
                               }).ToArrayAsync();

            foreach (var detail in tasks)
            {
                //create the nag log item and create the notification
                var taskReminderLog = new Audit.PmnTaskReminderLog
                {
                    Description = "Task reminder: Task '" + detail.Task.Subject + "' for request '" + detail.RequestName + "' with ID '" + detail.RequestIdentifier + "' is '" + ObjectEx.ToString(detail.Task.Status, true) + "'.",
                    Task = detail.Task,
                    TaskID = detail.TaskID,
                    TimeStamp = DateTime.UtcNow,
                    UserID = Guid.Empty
                };

                db.LogsTaskReminder.Add(taskReminderLog);
                await db.SaveChangesAsync();

                var notification = CreateNotifications(taskReminderLog, db, false);
                if (notification != null && notification.Any())
                    notifications.AddRange(notification);
            }
            return notifications.AsEnumerable();
        }
    }
}
