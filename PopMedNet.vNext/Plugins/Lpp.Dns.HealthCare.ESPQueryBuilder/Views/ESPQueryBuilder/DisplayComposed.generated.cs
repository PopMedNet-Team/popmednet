#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lpp.Dns.HealthCare.ESPQueryBuilder.Views.ESPQueryBuilder
{
    using System;
    
    #line 6 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    using System.IO;
    
    #line 7 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using Lpp;
    
    #line 3 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
    using Lpp.Dns.General.CriteriaGroup.Models;
    
    #line default
    #line hidden
    
    #line 2 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
    using Lpp.Dns.General.CriteriaGroup.Views.CriteriaGroup.Terms;
    
    #line default
    #line hidden
    using Lpp.Dns.HealthCare.Controllers;
    using Lpp.Dns.HealthCare.ESPQueryBuilder;
    using Lpp.Dns.HealthCare.ESPQueryBuilder.Models;
    using Lpp.Dns.HealthCare.ESPQueryBuilder.Views;
    
    #line 4 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
    using Lpp.Dns.HealthCare.ESPQueryBuilder.Views.ESPQueryBuilder.Terms;
    
    #line default
    #line hidden
    using Lpp.Mvc;
    using Lpp.Mvc.Application;
    using Lpp.Mvc.Controls;
    
    #line 5 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
    using Lpp.Utilities;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/ESPQueryBuilder/DisplayComposed.cshtml")]
    public partial class DisplayComposed : System.Web.Mvc.WebViewPage<Lpp.Dns.HealthCare.ESPQueryBuilder.Models.ESPQueryViewModel>
    {
        public DisplayComposed()
        {
        }
        public override void Execute()
        {
            
            #line 8 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
   
    this.Stylesheet("ESPQueryComposition.min.css");
    Lpp.Dns.Data.LookupListValue[] lookupListValues = Model.Codes.ToArray();

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n<div");

WriteLiteral(" class=\"MedicalRequest Display ui-form\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" id=\"CriteriaGroups\"");

WriteLiteral(" class=\"panel panel-default\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"panel-heading\"");

WriteLiteral(">\r\n                Criteria Groups\r\n            </div>\r\n            <div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral(">\r\n\r\n");

            
            #line 20 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                
            
            #line default
            #line hidden
            
            #line 20 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                 foreach (var criteriaGroup in Model.CriteriaGroups)
                {

            
            #line default
            #line hidden
WriteLiteral("                    <div");

WriteLiteral(" class=\"CriteriaGroup panel panel-default\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"panel-heading\"");

WriteLiteral(">\r\n                            Criteria Group: ");

            
            #line 24 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                                       Write(criteriaGroup.CriteriaGroupName);

            
            #line default
            #line hidden
WriteLiteral("\r\n                        </div>\r\n                        <div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"InputParameters\"");

WriteLiteral(">\r\n");

            
            #line 28 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                                
            
            #line default
            #line hidden
            
            #line 28 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                                 foreach (var term in criteriaGroup.Terms)
                                {
                                    // if the term uses the codes list, the list will be trashed when filtered... this lets us restore it!
                                    var safeList = Model.Codes;

                                    switch (term.TermName)
                                    {
                                        case "AgeRange":
                                            Model.Base.MinAge = term.Args["MinAge"];
                                            Model.Base.MaxAge = term.Args["MaxAge"];
                                            Write(Html.Partial<DisplayAgeRange>());
                                            break;
                                        case "DiseaseSelector":
                                            Model.Base.Disease = term.Args["Disease"];
                                            Write(Html.Partial<DisplayDiseaseSelector>().WithModel(Model));
                                            break;
                                        case "Gender":
                                            var sex = 0;
                                            Int32.TryParse(term.Args["Sex"], out sex);
                                            Model.Base.Sex = sex;
                                            Write(Html.Partial<DisplayGender>().WithModel(Model));
                                            break;
                                        case "ICD9CodeSelector":
                                            string[] codes = term.Args["Codes"].Split(',').Select(c => c.Trim()).ToArray();
                                            Model.Codes = lookupListValues.Where(c => codes.Contains(c.ItemCode.Trim())).ToArray();
                                            Write(Html.Partial<DisplayICD9CodeSelector>().WithModel(Model));
                                            break;
                                        case "RaceSelector":
                                            Model.Codes = Model.Codes.Where(c => term.Args["Race"].Split(',').Contains(c.ItemCode.Trim()));
                                            Write(Html.Partial<DisplayRaceSelector>().WithModel(Model));
                                            break;
                                        case "SmokingSelector":
                                            Model.Codes = Model.Codes.Where(c => term.Args["Smoking"].Split(',').Contains(c.ItemCode.Trim()));
                                            Write(Html.Partial<DisplaySmokingSelector>().WithModel(Model));
                                            break;
                                        case "EthnicitySelector":
                                            Model.Codes = Model.Codes.Where(c => term.Args["Ethnicity"].Split(',').Contains(c.ItemCode.Trim()));
                                            Write(Html.Partial<DisplayEthnicitySelector>().WithModel(Model));
                                            break;

                                        case "ZipCodeSelector":
                                            Model.Base.ZipCodes = term.Args["Codes"];                                            
                                            Write(Html.Partial<DisplayZipCodeSelector>().WithModel(Model));
                                            break;
                                        case "CustomLocation":
                                            string clv;
                                            if (term.Args.TryGetValue("LocationName", out clv))
                                            {
                                                Model.Base.LocationNames = clv;
                                            }
                                            if (term.Args.TryGetValue("LocationCodes", out clv))
                                            {
                                                Model.Base.LocationCodes = clv;
                                            }
                                            Write(Html.Partial<DisplayCustomLocation>().WithModel(Model));
                                            break;
                                        case "PredefinedLocation":
                                            string selectedLocations;
                                            if (term.Args.TryGetValue("PredefinedLocations", out selectedLocations))
                                            {
                                                Model.Base.LocationCodes = selectedLocations;
                                            }
                                            Write(Html.Partial<DisplayPredefinedLocation>().WithModel(Model));
                                            break;
                                        case "ObservationPeriod":
                                            DateTime sp = DateTime.MinValue;
                                            DateTime ep = DateTime.MaxValue;
                                            if (term.Args.ContainsKey("StartPeriod") && !string.IsNullOrWhiteSpace(term.Args["StartPeriod"]))
                                            {
                                                DateTime.TryParse(term.Args["StartPeriod"], out sp);
                                            }

                                            if (term.Args.ContainsKey("EndPeriod") && !string.IsNullOrWhiteSpace(term.Args["EndPeriod"]))
                                            {
                                                DateTime.TryParse(term.Args["EndPeriod"], out ep);
                                            }
                                       
                                            Write(Html.Partial<DisplayObservationPeriod>().WithModel(new ObservationPeriodModel
                                            {                                                
                                                StartPeriod = sp != DateTime.MinValue ? (DateTime?) sp : null,
                                                EndPeriod = ep != DateTime.MaxValue ? (DateTime?) ep : null,
                                            }));
                                            break;
                                        case "Visits":
                                            var visits = 0;
                                            Int32.TryParse(term.Args["MinVisits"], out visits);
                                            Model.Base.MinVisits = visits;        
                                            Write(Html.Partial<DisplayVisits>());
                                            break;
                                        default:
                                            break;
                                    }
                                    
                                    Model.Codes = safeList;
                                }

            
            #line default
            #line hidden
WriteLiteral("                            </div>\r\n                            <div");

WriteLiteral(" class=\"CriteriaGroupFooter\"");

WriteLiteral(">\r\n");

            
            #line 125 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                                
            
            #line default
            #line hidden
            
            #line 125 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                                 if (criteriaGroup.ExcludeCriteriaGroup) {

            
            #line default
            #line hidden
WriteLiteral("                                    ");

WriteLiteral("\r\n                                <div");

WriteLiteral(" class=\"CriteriaGroupOptions\"");

WriteLiteral(" >\r\n");

WriteLiteral("                                    ");

            
            #line 128 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                               Write(Html.CheckBox("ExcludeCriteriaGroup", criteriaGroup.ExcludeCriteriaGroup, new { @class = "ExcludeCriteriaGroup" }));

            
            #line default
            #line hidden
WriteLiteral(" Exclude Criteria Group <img");

WriteLiteral(" src=\"/Content/img/icons/help16.gif\"");

WriteLiteral(" class=\"helptip\"");

WriteLiteral(" title=\"Excluding this Criteria Group will subtract it from the final patient coh" +
"ort.\"");

WriteLiteral(" /><br />\r\n                                    ");

WriteLiteral("\r\n                                </div>\r\n                                    ");

WriteLiteral("\r\n");

            
            #line 132 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                                }

            
            #line default
            #line hidden
WriteLiteral("                            </div>\r\n                        </div>\r\n             " +
"       </div>\r\n");

            
            #line 136 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                }

            
            #line default
            #line hidden
WriteLiteral("            </div>\r\n        </div>\r\n\r\n            <div");

WriteLiteral(" class=\"ReportParameters\"");

WriteLiteral(">\r\n                ");

WriteLiteral("\r\n                <div");

WriteLiteral(" class=\"panel panel-default\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"panel-heading\"");

WriteLiteral(">\r\n                        Reports Selected\r\n                    </div>\r\n        " +
"            <div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral(">\r\n                        <ul");

WriteLiteral(" class=\"list-group SelectionList\"");

WriteLiteral(">\r\n");

WriteLiteral("                            ");

            
            #line 158 "..\..\Views\ESPQueryBuilder\DisplayComposed.cshtml"
                       Write(Html.Raw(string.Join("",
                            from rp in Model.Base.ReportSelections
                            join id in (Model.Base.Report ?? "").Split(',') on rp.Value.ToString() equals id
                            let stratId = rp.Name.StartsWith("Age") ? Model.Base.AgeStratification :
                                            rp.Name.StartsWith("Period") ? Model.Base.PeriodStratification :
                                                rp.Name.StartsWith("ICD9") ? Model.Base.ICD9Stratification :
                                            null
                            let strat = rp.SelectionList.EmptyIfNull()
                                            .Where(s => s.StratificationCategoryId == stratId)
                                            .Select(s => " (" + s.CategoryText + ")")
                                            .FirstOrDefault()
                            select "<li class=\"list-group-item SelectedItems\">" + rp.Display + strat + "</li>")));

            
            #line default
            #line hidden
WriteLiteral("\r\n                        </ul>\r\n                    </div>\r\n                </di" +
"v>\r\n            </div>\r\n\r\n\r\n</div>\r\n");

        }
    }
}
#pragma warning restore 1591
